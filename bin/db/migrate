#!/usr/bin/env python3

import os
import sys
import glob
import re
import time
import importlib

# First set up the correct Python path
current_path = os.path.dirname(os.path.abspath(__file__))
backend_path = os.path.abspath(os.path.join(current_path, '..', '..', 'backend-flask'))
lib_path = os.path.join(backend_path, 'lib') # Add backend-flask to Python path
sys.path.append(lib_path)

# Now import db
from db import db  

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..', '..','backend-flask'))
sys.path.append(parent_path)

def get_last_successful_run():
  sql = """
    SELECT last_successful_run
    FROM public.schema_information
    LIMIT 1
  """
  try:
      result = db.query_value(sql, {}, verbose=False)
      return int(result) if result is not None else 0  # Default to 0 if NULL
  except Exception as e:
      print(f"⚠️ Error fetching last_successful_run: {e}")
      return 0 

def set_last_successful_run(value):
  sql = """
  UPDATE schema_information
  SET last_successful_run = %(last_successful_run)s
  WHERE id = 1
  """
  try:
      db.query_commit(sql, {'last_successful_run': str(value)}, verbose=False)
      return int(value)
  except Exception as e:
      print(f"⚠️ Error updating last_successful_run: {e}")
      return 0
  
last_successful_run = int(get_last_successful_run())

migrations_path = os.path.abspath(os.path.join(current_path, '..', '..','backend-flask','db','migrations'))
sys.path.append(migrations_path)
migration_files = glob.glob(f"{migrations_path}/*")


for migration_file in migration_files:
  filename = os.path.basename(migration_file)
  module_name = os.path.splitext(filename)[0]
  match = re.match(r'^\d+', filename)
  if match:
    file_time = int(match.group())
    print(last_successful_run)
    print(file_time)
    if last_successful_run < file_time:
      try:
          mod = importlib.import_module(module_name)
          print(f"=== running migration: {module_name}")
          mod.migration.migrate()
          last_successful_run = set_last_successful_run(file_time)  # Update to latest file_time
      except Exception as e:
          print(f"❌ Migration failed for {module_name}: {e}")
          sys.exit(1)
